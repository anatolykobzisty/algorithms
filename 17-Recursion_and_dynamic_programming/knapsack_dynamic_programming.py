'''
   Алгоритм дискретной задачи о рюкзаке методом двумерного динамического програмирования
   
   теория
   https://youtu.be/aN15vtKjdP4?t=3561
   
   реализация
   https://youtu.be/aN15vtKjdP4?t=4443
'''

''' F[k][i] - максимальная стоимость предметов, которые можно уложить в рюкзак,
    которая помещается в рюкзак емкости M[k], при этом можно использовать только первые N[i] предметов
'''

m = [10, 20, 30]    # m[i] массы предметов
v = [60, 100, 120]  # v[i] стоимости предметов 

M = 50              # максимальная масса рюкзака
N = len(m)-1        # количество предметов

def knapsack(M, m, v, N):
    F = [ [0]*(N+1) for i in range(M+1)]
    for i in range(1, N+1):  
        for k in range(1, M+1):
            if m[i] <= k:
                F[k][i] = max(v[i] + F[k-m[i]][i-1], F[k][i-1])
            else:
                F[k][i] = F[k][i-1]
    return F[M][N]

print(knapsack(M, m, v, N))

  